import { Compiler } from "../compiler";
import { Expect } from "../expect";
import { snippet as _snippet } from "../snippet";
export { Compiler };
export { Expect };
export function expecter(factory, compilerOrOptions, rootDirectory) {
    if (factory === void 0) { factory = function (code) { return code; }; }
    var compiler = compilerOrOptions instanceof Compiler
        ? compilerOrOptions
        : new Compiler(compilerOrOptions, rootDirectory);
    return function (context, code) {
        return snippet(context, {
            "snippet.ts": factory(code)
        }, compiler).expect("snippet.ts");
    };
}
export function snippet(context, files, compiler) {
    var s = _snippet(files, compiler);
    s.assertFail = function (message) { return context.fail(message); };
    s.assertPass = function () { return context.pass(); };
    return s;
}
