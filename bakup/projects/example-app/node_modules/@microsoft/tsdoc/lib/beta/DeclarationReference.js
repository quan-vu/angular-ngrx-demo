"use strict";
// tslint:disable:no-use-before-declare
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
// NOTE: See DeclarationReference.grammarkdown for information on the underlying grammar.
/**
 * Represents a reference to a declaration.
 * @beta
 */
var DeclarationReference = /** @class */ (function () {
    function DeclarationReference(source, navigation, symbol) {
        this._source = source;
        this._navigation = navigation;
        this._symbol = symbol;
    }
    Object.defineProperty(DeclarationReference.prototype, "source", {
        get: function () {
            return this._source;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DeclarationReference.prototype, "navigation", {
        get: function () {
            if (!this._source || !this._symbol) {
                return undefined;
            }
            if (this._source === GlobalSource.instance) {
                return "~" /* Locals */;
            }
            if (this._navigation === undefined) {
                return "." /* Exports */;
            }
            return this._navigation;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DeclarationReference.prototype, "symbol", {
        get: function () {
            return this._symbol;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DeclarationReference.prototype, "isEmpty", {
        get: function () {
            return this.source === undefined
                && this.symbol === undefined;
        },
        enumerable: true,
        configurable: true
    });
    DeclarationReference.parse = function (text) {
        var parser = new Parser(text);
        var reference = parser.parseDeclarationReference();
        if (!parser.eof) {
            throw new SyntaxError("Invalid DeclarationReference '" + text + "'");
        }
        return reference;
    };
    DeclarationReference.makeSafeComponent = function (text) {
        var parser = new Parser(text);
        parser.parseComponent();
        return parser.eof ? text : JSON.stringify(text);
    };
    DeclarationReference.empty = function () {
        return new DeclarationReference();
    };
    DeclarationReference.module = function (path) {
        return new DeclarationReference(new ModuleSource(path));
    };
    DeclarationReference.global = function () {
        return new DeclarationReference(GlobalSource.instance);
    };
    DeclarationReference.prototype.withSource = function (source) {
        return this._source === source ? this : new DeclarationReference(source, this._navigation, this._symbol);
    };
    DeclarationReference.prototype.withNavigation = function (navigation) {
        return this._navigation === navigation ? this : new DeclarationReference(this._source, navigation, this._symbol);
    };
    DeclarationReference.prototype.withSymbol = function (symbol) {
        return this._symbol === symbol ? this : new DeclarationReference(this._source, this._navigation, symbol);
    };
    DeclarationReference.prototype.withComponent = function (component) {
        return this.withSymbol(this.symbol ? this.symbol.withComponent(component) : new SymbolReference(component));
    };
    DeclarationReference.prototype.withMeaning = function (meaning) {
        if (!this.symbol) {
            if (meaning === undefined) {
                return this;
            }
            throw new Error('Cannot set a meaning on a DeclarationReference without a symbol');
        }
        return this.withSymbol(this.symbol.withMeaning(meaning));
    };
    DeclarationReference.prototype.withOverloadIndex = function (overloadIndex) {
        if (!this.symbol) {
            if (overloadIndex === undefined) {
                return this;
            }
            throw new Error('Cannot set an overloadIndex on a DeclarationReference without a symbol');
        }
        return this.withSymbol(this.symbol.withOverloadIndex(overloadIndex));
    };
    DeclarationReference.prototype.addNavigationStep = function (navigation, text) {
        if (this.symbol) {
            return this.withSymbol(this.symbol.addNavigationStep(navigation, text));
        }
        if (navigation === "#" /* Members */) {
            navigation = "." /* Exports */;
        }
        return new DeclarationReference(this.source, navigation, new SymbolReference(new RootComponent(text)));
    };
    DeclarationReference.prototype.toString = function () {
        var navigation = this._source instanceof ModuleSource
            && this._symbol
            && this.navigation === "~" /* Locals */ ? '~' : '';
        return "" + (this.source || '') + navigation + (this.symbol || '');
    };
    return DeclarationReference;
}());
exports.DeclarationReference = DeclarationReference;
/**
 * Represents a module.
 * @beta
 */
var ModuleSource = /** @class */ (function () {
    function ModuleSource(path, escapeIfNeeded) {
        if (escapeIfNeeded === void 0) { escapeIfNeeded = true; }
        this.path = escapeIfNeeded ? DeclarationReference.makeSafeComponent(path) : path;
    }
    ModuleSource.prototype.toString = function () {
        return this.path + "!";
    };
    return ModuleSource;
}());
exports.ModuleSource = ModuleSource;
/**
 * Represents the global scope.
 * @beta
 */
var GlobalSource = /** @class */ (function () {
    function GlobalSource() {
    }
    GlobalSource.prototype.toString = function () {
        return '!';
    };
    GlobalSource.instance = new GlobalSource();
    return GlobalSource;
}());
exports.GlobalSource = GlobalSource;
/**
 * @beta
 */
var ComponentBase = /** @class */ (function () {
    function ComponentBase(text, escapeIfNeeded) {
        if (escapeIfNeeded === void 0) { escapeIfNeeded = true; }
        this.text = escapeIfNeeded ? DeclarationReference.makeSafeComponent(text) : text;
    }
    ComponentBase.prototype.addNavigationStep = function (navigation, text) {
        // tslint:disable-next-line:no-use-before-declare
        return new NavigationComponent(this, navigation, text);
    };
    return ComponentBase;
}());
exports.ComponentBase = ComponentBase;
/**
 * @beta
 */
var RootComponent = /** @class */ (function (_super) {
    __extends(RootComponent, _super);
    function RootComponent() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    RootComponent.prototype.toString = function () {
        return this.text;
    };
    return RootComponent;
}(ComponentBase));
exports.RootComponent = RootComponent;
/**
 * @beta
 */
var NavigationComponent = /** @class */ (function (_super) {
    __extends(NavigationComponent, _super);
    function NavigationComponent(source, navigation, text, escapeIfNeeded) {
        if (escapeIfNeeded === void 0) { escapeIfNeeded = true; }
        var _this = _super.call(this, text, escapeIfNeeded) || this;
        _this.parent = source;
        _this.navigation = navigation;
        return _this;
    }
    NavigationComponent.prototype.toString = function () {
        return "" + this.parent + formatNavigation(this.navigation) + this.text;
    };
    return NavigationComponent;
}(ComponentBase));
exports.NavigationComponent = NavigationComponent;
/**
 * Represents a reference to a TypeScript symbol.
 * @beta
 */
var SymbolReference = /** @class */ (function () {
    function SymbolReference(component, _a) {
        var _b = _a === void 0 ? {} : _a, meaning = _b.meaning, overloadIndex = _b.overloadIndex;
        this.component = component;
        this.overloadIndex = overloadIndex;
        this.meaning = meaning;
    }
    SymbolReference.prototype.withComponent = function (component) {
        return this.component === component ? this : new SymbolReference(component, {
            meaning: this.meaning,
            overloadIndex: this.overloadIndex
        });
    };
    SymbolReference.prototype.withMeaning = function (meaning) {
        return this.meaning === meaning ? this : new SymbolReference(this.component, {
            meaning: meaning,
            overloadIndex: this.overloadIndex
        });
    };
    SymbolReference.prototype.withOverloadIndex = function (overloadIndex) {
        return this.overloadIndex === overloadIndex ? this : new SymbolReference(this.component, {
            meaning: this.meaning,
            overloadIndex: overloadIndex
        });
    };
    SymbolReference.prototype.addNavigationStep = function (navigation, text) {
        return new SymbolReference(this.component.addNavigationStep(navigation, text));
    };
    SymbolReference.prototype.toString = function () {
        var result = "" + (this.component || '');
        if (this.meaning && this.overloadIndex !== undefined) {
            result += ":" + this.meaning + "(" + this.overloadIndex + ")";
        }
        else if (this.meaning) {
            result += ":" + this.meaning;
        }
        else if (this.overloadIndex !== undefined) {
            result += ":" + this.overloadIndex;
        }
        return result;
    };
    return SymbolReference;
}());
exports.SymbolReference = SymbolReference;
var Scanner = /** @class */ (function () {
    function Scanner(text) {
        this._pos = 0;
        this._tokenPos = 0;
        this._stringIsUnterminated = false;
        this._token = 0 /* None */;
        this._text = text;
    }
    Object.defineProperty(Scanner.prototype, "stringIsUnterminated", {
        get: function () {
            return this._stringIsUnterminated;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Scanner.prototype, "text", {
        get: function () {
            return this._text;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Scanner.prototype, "tokenText", {
        get: function () {
            return this._text.slice(this._tokenPos, this._pos);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Scanner.prototype, "eof", {
        get: function () {
            return this._pos >= this._text.length;
        },
        enumerable: true,
        configurable: true
    });
    Scanner.prototype.token = function () {
        return this._token;
    };
    Scanner.prototype.speculate = function (cb) {
        var tokenPos = this._tokenPos;
        var pos = this._pos;
        var text = this._text;
        var token = this._token;
        var stringIsUnterminated = this._stringIsUnterminated;
        var accepted = false;
        try {
            var accept = function () { accepted = true; };
            return cb(accept);
        }
        finally {
            if (!accepted) {
                this._tokenPos = tokenPos;
                this._pos = pos;
                this._text = text;
                this._token = token;
                this._stringIsUnterminated = stringIsUnterminated;
            }
        }
    };
    Scanner.prototype.scan = function () {
        if (!this.eof) {
            this._tokenPos = this._pos;
            this._stringIsUnterminated = false;
            while (!this.eof) {
                var ch = this._text[this._pos++];
                switch (ch) {
                    case '{': return this._token = 2 /* OpenBraceToken */;
                    case '}': return this._token = 3 /* CloseBraceToken */;
                    case '(': return this._token = 4 /* OpenParenToken */;
                    case ')': return this._token = 5 /* CloseParenToken */;
                    case '[': return this._token = 6 /* OpenBracketToken */;
                    case ']': return this._token = 7 /* CloseBracketToken */;
                    case '!': return this._token = 8 /* ExclamationToken */;
                    case '.': return this._token = 9 /* DotToken */;
                    case '#': return this._token = 10 /* HashToken */;
                    case '~': return this._token = 11 /* TildeToken */;
                    case ':': return this._token = 12 /* ColonToken */;
                    case ',': return this._token = 13 /* CommaToken */;
                    case '"':
                        this.scanString();
                        return this._token = 15 /* String */;
                    default:
                        this.scanText();
                        return this._token = 16 /* Text */;
                }
            }
        }
        return this._token = 1 /* EofToken */;
    };
    Scanner.prototype.rescanMeaning = function () {
        if (this._token === 16 /* Text */) {
            var tokenText = this.tokenText;
            switch (tokenText) {
                case 'class': return this._token = 17 /* ClassKeyword */;
                case 'interface': return this._token = 18 /* InterfaceKeyword */;
                case 'typealias': return this._token = 19 /* TypealiasKeyword */;
                case 'enum': return this._token = 20 /* EnumKeyword */;
                case 'namespace': return this._token = 21 /* NamespaceKeyword */;
                case 'function': return this._token = 22 /* FunctionKeyword */;
                case 'variable': return this._token = 23 /* VariableKeyword */;
                case 'constructor': return this._token = 24 /* ConstructorKeyword */;
                case 'member': return this._token = 25 /* MemberKeyword */;
                case 'event': return this._token = 26 /* EventKeyword */;
                case 'enummember': return this._token = 27 /* EnumMemberKeyword */;
                case 'signature': return this._token = 28 /* SignatureKeyword */;
                case 'type': return this._token = 29 /* TypeKeyword */;
            }
        }
        return this._token;
    };
    Scanner.prototype.rescanDecimalDigits = function () {
        if (this._token === 16 /* Text */) {
            var tokenText = this.tokenText;
            if (/^\d+$/.test(tokenText)) {
                return this._token = 14 /* DecimalDigits */;
            }
        }
        return this._token;
    };
    Scanner.prototype.scanString = function () {
        while (!this.eof) {
            var ch = this._text[this._pos++];
            switch (ch) {
                case '"': return;
                case '\\':
                    this.scanEscapeSequence();
                    break;
                default:
                    if (isLineTerminator(ch)) {
                        this._stringIsUnterminated = true;
                        return;
                    }
            }
        }
        this._stringIsUnterminated = true;
    };
    Scanner.prototype.scanEscapeSequence = function () {
        if (this.eof) {
            this._stringIsUnterminated = true;
            return;
        }
        var ch = this._text.charAt(this._pos);
        // EscapeSequence:: CharacterEscapeSequence
        if (isCharacterEscapeSequence(ch)) {
            this._pos++;
            return;
        }
        // EscapeSequence:: `0` [lookahead != DecimalDigit]
        if (ch === '0'
            && (this._pos + 1 === this._text.length
                || !isDecimalDigit(this._text.charAt(this._pos + 1)))) {
            this._pos++;
            return;
        }
        // EscapeSequence:: HexEscapeSequence
        if (ch === 'x'
            && this._pos + 3 <= this._text.length
            && isHexDigit(this._text.charAt(this._pos + 1))
            && isHexDigit(this._text.charAt(this._pos + 2))) {
            this._pos += 3;
            return;
        }
        // EscapeSequence:: UnicodeEscapeSequence
        // UnicodeEscapeSequence:: `u` Hex4Digits
        if (ch === 'u'
            && this._pos + 5 <= this._text.length
            && isHexDigit(this._text.charAt(this._pos + 1))
            && isHexDigit(this._text.charAt(this._pos + 2))
            && isHexDigit(this._text.charAt(this._pos + 3))
            && isHexDigit(this._text.charAt(this._pos + 4))) {
            this._pos += 5;
            return;
        }
        // EscapeSequence:: UnicodeEscapeSequence
        // UnicodeEscapeSequence:: `u` `{` CodePoint `}`
        if (ch === 'u'
            && this._pos + 4 <= this._text.length
            && this._text.charAt(this._pos + 1) === '{') {
            var hexDigits = this._text.charAt(this._pos + 2);
            if (isHexDigit(hexDigits)) {
                for (var i = this._pos + 3; i < this._text.length; i++) {
                    var ch2 = this._text.charAt(i);
                    if (ch2 === '}') {
                        var mv = parseInt(hexDigits, 16);
                        if (mv <= 0x10ffff) {
                            this._pos = i + 1;
                            return;
                        }
                        break;
                    }
                    if (!isHexDigit(ch2)) {
                        hexDigits += ch2;
                        break;
                    }
                }
            }
        }
        this._stringIsUnterminated = true;
    };
    Scanner.prototype.scanText = function () {
        while (this._pos < this._text.length) {
            var ch = this._text.charAt(this._pos);
            if (isPunctuator(ch) || ch === '"') {
                return;
            }
            this._pos++;
        }
    };
    return Scanner;
}());
var Parser = /** @class */ (function () {
    function Parser(text) {
        this.scanner = new Scanner(text);
        this.scanner.scan();
    }
    Object.defineProperty(Parser.prototype, "eof", {
        get: function () {
            return this.scanner.eof;
        },
        enumerable: true,
        configurable: true
    });
    Parser.prototype.parseDeclarationReference = function () {
        var source;
        var navigation;
        var symbol;
        if (this.optionalToken(8 /* ExclamationToken */)) {
            // Reference to global symbol
            source = GlobalSource.instance;
            symbol = this.parseSymbol();
        }
        else if (this.isStartOfComponent()) {
            // Either path for module source or first component of symbol
            var root = this.parseComponent();
            if (this.optionalToken(8 /* ExclamationToken */)) {
                // Definitely path for module source
                source = new ModuleSource(root, /*escapeIfNeeded*/ false);
                // Check for optional `~` navigation token.
                if (this.optionalToken(11 /* TildeToken */)) {
                    navigation = "~" /* Locals */;
                }
                if (this.isStartOfComponent()) {
                    symbol = this.parseSymbol();
                }
            }
            else {
                // Definitely a symbol
                symbol = this.parseSymbolRest(this.parseComponentRest(new RootComponent(root, /*escapeIfNeeded*/ false)));
            }
        }
        return new DeclarationReference(source, navigation, symbol);
    };
    Parser.prototype.parseComponent = function () {
        switch (this.scanner.token()) {
            case 15 /* String */:
                return this.parseString();
            default:
                return this.parseComponentAtoms();
        }
    };
    Parser.prototype.token = function () {
        return this.scanner.token();
    };
    Parser.prototype.parseSymbol = function () {
        var component = this.parseComponentRest(this.parseRootComponent());
        return this.parseSymbolRest(component);
    };
    Parser.prototype.parseSymbolRest = function (component) {
        var meaning;
        var overloadIndex;
        if (this.optionalToken(12 /* ColonToken */)) {
            meaning = this.tryParseMeaning();
            overloadIndex = this.tryParseOverloadIndex(!!meaning);
        }
        return new SymbolReference(component, { meaning: meaning, overloadIndex: overloadIndex });
    };
    Parser.prototype.parseRootComponent = function () {
        if (!this.isStartOfComponent()) {
            return this.fail();
        }
        var text = this.parseComponent();
        return new RootComponent(text, /*escapeIfNeeded*/ false);
    };
    Parser.prototype.parseComponentRest = function (component) {
        for (;;) {
            switch (this.token()) {
                case 9 /* DotToken */:
                case 10 /* HashToken */:
                case 11 /* TildeToken */:
                    var navigation = this.parseNavigation();
                    var text = this.parseComponent();
                    component = new NavigationComponent(component, navigation, text, /*escapeIfNeeded*/ false);
                    break;
                default:
                    return component;
            }
        }
    };
    Parser.prototype.parseNavigation = function () {
        switch (this.scanner.token()) {
            case 9 /* DotToken */: return this.scanner.scan(), "." /* Exports */;
            case 10 /* HashToken */: return this.scanner.scan(), "#" /* Members */;
            case 11 /* TildeToken */: return this.scanner.scan(), "~" /* Locals */;
            default: return this.fail();
        }
    };
    Parser.prototype.tryParseMeaning = function () {
        switch (this.scanner.rescanMeaning()) {
            case 17 /* ClassKeyword */: return this.scanner.scan(), "class" /* Class */;
            case 18 /* InterfaceKeyword */: return this.scanner.scan(), "interface" /* Interface */;
            case 19 /* TypealiasKeyword */: return this.scanner.scan(), "typealias" /* TypeAlias */;
            case 20 /* EnumKeyword */: return this.scanner.scan(), "enum" /* Enum */;
            case 21 /* NamespaceKeyword */: return this.scanner.scan(), "namespace" /* Namespace */;
            case 22 /* FunctionKeyword */: return this.scanner.scan(), "function" /* Function */;
            case 23 /* VariableKeyword */: return this.scanner.scan(), "variable" /* Variable */;
            case 24 /* ConstructorKeyword */: return this.scanner.scan(), "constructor" /* Constructor */;
            case 25 /* MemberKeyword */: return this.scanner.scan(), "member" /* Member */;
            case 26 /* EventKeyword */: return this.scanner.scan(), "event" /* Event */;
            case 27 /* EnumMemberKeyword */: return this.scanner.scan(), "enummember" /* EnumMember */;
            case 28 /* SignatureKeyword */: return this.scanner.scan(), "signature" /* Signature */;
            case 29 /* TypeKeyword */: return this.scanner.scan(), "type" /* Type */;
            default: return undefined;
        }
    };
    Parser.prototype.tryParseOverloadIndex = function (hasMeaning) {
        if (this.optionalToken(4 /* OpenParenToken */)) {
            var overloadIndex = this.parseDecimalDigits();
            this.expectToken(5 /* CloseParenToken */);
            return overloadIndex;
        }
        else if (!hasMeaning) {
            return this.parseDecimalDigits();
        }
        return undefined;
    };
    Parser.prototype.parseDecimalDigits = function () {
        switch (this.scanner.rescanDecimalDigits()) {
            case 14 /* DecimalDigits */:
                var value = +this.scanner.tokenText;
                this.scanner.scan();
                return value;
            default:
                return this.fail();
        }
    };
    Parser.prototype.isStartOfComponent = function () {
        switch (this.token()) {
            case 15 /* String */:
            case 16 /* Text */:
            case 6 /* OpenBracketToken */:
                return true;
            default:
                return false;
        }
    };
    Parser.prototype.parseComponentAtoms = function () {
        var text = '';
        for (;;) {
            switch (this.scanner.token()) {
                case 16 /* Text */:
                    text += this.parseText();
                    break;
                case 6 /* OpenBracketToken */:
                    text += this.parseBracketedComponent();
                    break;
                default:
                    return text;
            }
        }
    };
    Parser.prototype.parseText = function () {
        if (this.scanner.token() === 16 /* Text */) {
            var text = this.scanner.tokenText;
            this.scanner.scan();
            return text;
        }
        return this.fail();
    };
    Parser.prototype.parseString = function () {
        if (this.scanner.token() === 15 /* String */) {
            var text = this.scanner.tokenText;
            this.scanner.scan();
            return text;
        }
        return this.fail();
    };
    Parser.prototype.parseBracketedComponent = function () {
        this.expectToken(6 /* OpenBracketToken */);
        var text = this.parseBracketedAtoms();
        this.expectToken(7 /* CloseBracketToken */);
        return "[" + text + "]";
    };
    Parser.prototype.parseBracketedAtoms = function () {
        var text = '';
        for (;;) {
            switch (this.scanner.token()) {
                case 15 /* String */:
                    text += this.parseString();
                    break;
                case 16 /* Text */:
                    text += this.parseText();
                    break;
                case 6 /* OpenBracketToken */:
                    text += this.parseBracketedComponent();
                    break;
                default:
                    return text;
            }
        }
    };
    Parser.prototype.optionalToken = function (token) {
        if (this.scanner.token() === token) {
            this.scanner.scan();
            return true;
        }
        return false;
    };
    Parser.prototype.expectToken = function (token, message) {
        if (this.scanner.token() !== token) {
            return this.fail(message);
        }
        this.scanner.scan();
    };
    Parser.prototype.fail = function (message) {
        throw new SyntaxError("Invalid DeclarationReference '" + this.scanner.text + "'" + (message ? ": " + message : ''));
    };
    return Parser;
}());
function formatNavigation(navigation) {
    switch (navigation) {
        case "." /* Exports */: return '.';
        case "#" /* Members */: return '#';
        case "~" /* Locals */: return '~';
        default: return '';
    }
}
function isCharacterEscapeSequence(ch) {
    return isSingleEscapeCharacter(ch)
        || isNonEscapeCharacter(ch);
}
function isSingleEscapeCharacter(ch) {
    switch (ch) {
        case '\'':
        case '"':
        case '\\':
        case 'b':
        case 'f':
        case 'n':
        case 'r':
        case 't':
        case 'v':
            return true;
        default:
            return false;
    }
}
function isNonEscapeCharacter(ch) {
    return !isEscapeCharacter(ch)
        && !isLineTerminator(ch);
}
function isEscapeCharacter(ch) {
    switch (ch) {
        case 'x':
        case 'u':
            return true;
        default:
            return isSingleEscapeCharacter(ch)
                || isDecimalDigit(ch);
    }
}
function isLineTerminator(ch) {
    switch (ch) {
        case '\r':
        case '\n':
            // TODO: <LS>, <PS>
            return true;
        default:
            return false;
    }
}
function isDecimalDigit(ch) {
    switch (ch) {
        case '0':
        case '1':
        case '2':
        case '3':
        case '4':
        case '5':
        case '6':
        case '7':
        case '8':
        case '9':
            return true;
        default:
            return false;
    }
}
function isHexDigit(ch) {
    switch (ch) {
        case 'a':
        case 'b':
        case 'c':
        case 'd':
        case 'e':
        case 'f':
        case 'A':
        case 'B':
        case 'C':
        case 'D':
        case 'E':
        case 'F':
            return true;
        default:
            return isDecimalDigit(ch);
    }
}
function isPunctuator(ch) {
    switch (ch) {
        case '{':
        case '}':
        case '(':
        case ')':
        case '[':
        case ']':
        case '!':
        case '.':
        case '#':
        case '~':
        case ':':
        case ',':
            return true;
        default:
            return false;
    }
}
//# sourceMappingURL=DeclarationReference.js.map