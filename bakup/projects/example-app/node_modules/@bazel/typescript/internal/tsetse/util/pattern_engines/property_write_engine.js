(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "typescript", "../../error_code", "../ast_tools", "../match_symbol", "../pattern_engines/pattern_engine"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    const ts = require("typescript");
    const error_code_1 = require("../../error_code");
    const ast_tools_1 = require("../ast_tools");
    const match_symbol_1 = require("../match_symbol");
    const pattern_engine_1 = require("../pattern_engines/pattern_engine");
    /**
     * The engine for BANNED_PROPERTY_WRITE.
     */
    class PropertyWriteEngine extends pattern_engine_1.PatternEngine {
        constructor(config, fixer, verbose) {
            super(config, fixer, verbose);
            // TODO: Support more than one single value here, or even build a
            // multi-pattern engine. This would help for performance.
            if (this.config.values.length !== 1) {
                throw new Error(`BANNED_PROPERTY_WRITE expects one value, got(${this.config.values.join(',')})`);
            }
            this.matcher = match_symbol_1.PropertyMatcher.fromSpec(this.config.values[0]);
        }
        register(checker) {
            checker.on(ts.SyntaxKind.BinaryExpression, this.check.bind(this), error_code_1.ErrorCode.CONFORMANCE_PATTERN);
        }
        check(c, n) {
            if (!ast_tools_1.shouldExamineNode(n) || n.getSourceFile().isDeclarationFile ||
                !ast_tools_1.isPropertyWriteExpression(n)) {
                return;
            }
            ast_tools_1.debugLog(this.verbose, `inspecting ${n.getFullText().trim()}`);
            if (this.matcher.matches(n.left, c.typeChecker, this.verbose)) {
                const fix = this.fixer ? this.fixer.getFixForFlaggedNode(n) : undefined;
                c.addFailureAtNode(n, this.config.errorMessage, fix);
            }
        }
    }
    exports.PropertyWriteEngine = PropertyWriteEngine;
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvcGVydHlfd3JpdGVfZW5naW5lLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vZXh0ZXJuYWwvYnVpbGRfYmF6ZWxfcnVsZXNfdHlwZXNjcmlwdC9pbnRlcm5hbC90c2V0c2UvdXRpbC9wYXR0ZXJuX2VuZ2luZXMvcHJvcGVydHlfd3JpdGVfZW5naW5lLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0lBQUEsaUNBQWlDO0lBRWpDLGlEQUEyQztJQUUzQyw0Q0FBb0Y7SUFFcEYsa0RBQWdEO0lBRWhELHNFQUFnRTtJQUVoRTs7T0FFRztJQUNILE1BQWEsbUJBQW9CLFNBQzdCLDhCQUFnRDtRQUVsRCxZQUNJLE1BQWlELEVBQ2pELEtBQWtFLEVBQ2xFLE9BQWlCO1lBQ25CLEtBQUssQ0FBQyxNQUFNLEVBQUUsS0FBSyxFQUFFLE9BQU8sQ0FBQyxDQUFDO1lBQzlCLGlFQUFpRTtZQUNqRSx5REFBeUQ7WUFDekQsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO2dCQUNuQyxNQUFNLElBQUksS0FBSyxDQUFDLGdEQUNaLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7YUFDdEM7WUFDRCxJQUFJLENBQUMsT0FBTyxHQUFHLDhCQUFlLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDakUsQ0FBQztRQUVELFFBQVEsQ0FBQyxPQUFnQjtZQUN2QixPQUFPLENBQUMsRUFBRSxDQUNOLEVBQUUsQ0FBQyxVQUFVLENBQUMsZ0JBQWdCLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQ3JELHNCQUFTLENBQUMsbUJBQW1CLENBQUMsQ0FBQztRQUNyQyxDQUFDO1FBRUQsS0FBSyxDQUFDLENBQVUsRUFBRSxDQUFzQjtZQUN0QyxJQUFJLENBQUMsNkJBQWlCLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLGFBQWEsRUFBRSxDQUFDLGlCQUFpQjtnQkFDNUQsQ0FBQyxxQ0FBeUIsQ0FBQyxDQUFDLENBQUMsRUFBRTtnQkFDakMsT0FBTzthQUNSO1lBQ0Qsb0JBQVEsQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLGNBQWMsQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsQ0FBQztZQUMvRCxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLFdBQVcsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLEVBQUU7Z0JBQzdELE1BQU0sR0FBRyxHQUNMLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsb0JBQW9CLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQztnQkFDaEUsQ0FBQyxDQUFDLGdCQUFnQixDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLFlBQVksRUFBRSxHQUFHLENBQUMsQ0FBQzthQUN0RDtRQUNILENBQUM7S0FDRjtJQW5DRCxrREFtQ0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyB0cyBmcm9tICd0eXBlc2NyaXB0JztcbmltcG9ydCB7Q2hlY2tlcn0gZnJvbSAnLi4vLi4vY2hlY2tlcic7XG5pbXBvcnQge0Vycm9yQ29kZX0gZnJvbSAnLi4vLi4vZXJyb3JfY29kZSc7XG5pbXBvcnQge0ZpeH0gZnJvbSAnLi4vLi4vZmFpbHVyZSc7XG5pbXBvcnQge2RlYnVnTG9nLCBpc1Byb3BlcnR5V3JpdGVFeHByZXNzaW9uLCBzaG91bGRFeGFtaW5lTm9kZX0gZnJvbSAnLi4vYXN0X3Rvb2xzJztcbmltcG9ydCB7Rml4ZXJ9IGZyb20gJy4uL2ZpeGVyJztcbmltcG9ydCB7UHJvcGVydHlNYXRjaGVyfSBmcm9tICcuLi9tYXRjaF9zeW1ib2wnO1xuaW1wb3J0IHtDb25maWcsIE1hdGNoZWROb2RlVHlwZXMsIFBhdHRlcm5LaW5kfSBmcm9tICcuLi9wYXR0ZXJuX2NvbmZpZyc7XG5pbXBvcnQge1BhdHRlcm5FbmdpbmV9IGZyb20gJy4uL3BhdHRlcm5fZW5naW5lcy9wYXR0ZXJuX2VuZ2luZSc7XG5cbi8qKlxuICogVGhlIGVuZ2luZSBmb3IgQkFOTkVEX1BST1BFUlRZX1dSSVRFLlxuICovXG5leHBvcnQgY2xhc3MgUHJvcGVydHlXcml0ZUVuZ2luZSBleHRlbmRzXG4gICAgUGF0dGVybkVuZ2luZTxQYXR0ZXJuS2luZC5CQU5ORURfUFJPUEVSVFlfV1JJVEU+IHtcbiAgcHJpdmF0ZSByZWFkb25seSBtYXRjaGVyOiBQcm9wZXJ0eU1hdGNoZXI7XG4gIGNvbnN0cnVjdG9yKFxuICAgICAgY29uZmlnOiBDb25maWc8UGF0dGVybktpbmQuQkFOTkVEX1BST1BFUlRZX1dSSVRFPixcbiAgICAgIGZpeGVyPzogRml4ZXI8TWF0Y2hlZE5vZGVUeXBlc1tQYXR0ZXJuS2luZC5CQU5ORURfUFJPUEVSVFlfV1JJVEVdPixcbiAgICAgIHZlcmJvc2U/OiBib29sZWFuKSB7XG4gICAgc3VwZXIoY29uZmlnLCBmaXhlciwgdmVyYm9zZSk7XG4gICAgLy8gVE9ETzogU3VwcG9ydCBtb3JlIHRoYW4gb25lIHNpbmdsZSB2YWx1ZSBoZXJlLCBvciBldmVuIGJ1aWxkIGFcbiAgICAvLyBtdWx0aS1wYXR0ZXJuIGVuZ2luZS4gVGhpcyB3b3VsZCBoZWxwIGZvciBwZXJmb3JtYW5jZS5cbiAgICBpZiAodGhpcy5jb25maWcudmFsdWVzLmxlbmd0aCAhPT0gMSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBCQU5ORURfUFJPUEVSVFlfV1JJVEUgZXhwZWN0cyBvbmUgdmFsdWUsIGdvdCgke1xuICAgICAgICAgIHRoaXMuY29uZmlnLnZhbHVlcy5qb2luKCcsJyl9KWApO1xuICAgIH1cbiAgICB0aGlzLm1hdGNoZXIgPSBQcm9wZXJ0eU1hdGNoZXIuZnJvbVNwZWModGhpcy5jb25maWcudmFsdWVzWzBdKTtcbiAgfVxuXG4gIHJlZ2lzdGVyKGNoZWNrZXI6IENoZWNrZXIpIHtcbiAgICBjaGVja2VyLm9uKFxuICAgICAgICB0cy5TeW50YXhLaW5kLkJpbmFyeUV4cHJlc3Npb24sIHRoaXMuY2hlY2suYmluZCh0aGlzKSxcbiAgICAgICAgRXJyb3JDb2RlLkNPTkZPUk1BTkNFX1BBVFRFUk4pO1xuICB9XG5cbiAgY2hlY2soYzogQ2hlY2tlciwgbjogdHMuQmluYXJ5RXhwcmVzc2lvbikge1xuICAgIGlmICghc2hvdWxkRXhhbWluZU5vZGUobikgfHwgbi5nZXRTb3VyY2VGaWxlKCkuaXNEZWNsYXJhdGlvbkZpbGUgfHxcbiAgICAgICAgIWlzUHJvcGVydHlXcml0ZUV4cHJlc3Npb24obikpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZGVidWdMb2codGhpcy52ZXJib3NlLCBgaW5zcGVjdGluZyAke24uZ2V0RnVsbFRleHQoKS50cmltKCl9YCk7XG4gICAgaWYgKHRoaXMubWF0Y2hlci5tYXRjaGVzKG4ubGVmdCwgYy50eXBlQ2hlY2tlciwgdGhpcy52ZXJib3NlKSkge1xuICAgICAgY29uc3QgZml4OiBGaXh8dW5kZWZpbmVkID1cbiAgICAgICAgICB0aGlzLmZpeGVyID8gdGhpcy5maXhlci5nZXRGaXhGb3JGbGFnZ2VkTm9kZShuKSA6IHVuZGVmaW5lZDtcbiAgICAgIGMuYWRkRmFpbHVyZUF0Tm9kZShuLCB0aGlzLmNvbmZpZy5lcnJvck1lc3NhZ2UsIGZpeCk7XG4gICAgfVxuICB9XG59XG4iXX0=