(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "./ast_tools"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    const ast_tools_1 = require("./ast_tools");
    const JS_IDENTIFIER_FORMAT = '[\\w\\d_-]+';
    const FQN_FORMAT = `(${JS_IDENTIFIER_FORMAT}\.)*${JS_IDENTIFIER_FORMAT}`;
    // A fqn made out of a dot-separated chain of JS identifiers.
    const ABSOLUTE_RE = new RegExp(`^${FQN_FORMAT}$`);
    /**
     * This class matches symbols given a "foo.bar.baz" name, where none of the
     * steps are instances of classes.
     */
    class AbsoluteMatcher {
        /**
         * From a "path/to/file.ts:foo.bar.baz" or "foo.bar.baz" matcher
         * specification, builds a Matcher.
         */
        constructor(bannedName) {
            this.bannedName = bannedName;
            if (!bannedName.match(ABSOLUTE_RE)) {
                throw new Error('Malformed matcher selector.');
            }
            // JSConformance used to use a Foo.prototype.bar syntax for bar on
            // instances of Foo. TS doesn't surface the prototype part in the FQN, and
            // so you can't tell static `bar` on `foo` from the `bar` property/method
            // on `foo`. To avoid any confusion, throw there if we see `prototype` in
            // the spec: that way, it's obvious that you're not trying to match
            // properties.
            if (this.bannedName.includes('.prototype')) {
                throw new Error('Your pattern includes a .prototype, but the AbsoluteMatcher is ' +
                    'meant for non-object matches. Use the PropertyMatcher instead.');
            }
        }
        matches(n, tc, verbose) {
            // Get the symbol (or the one at the other end of this alias) that we're
            // looking at.
            const s = ast_tools_1.dealias(tc.getSymbolAtLocation(n), tc);
            if (!s) {
                ast_tools_1.debugLog(verbose, `cannot get symbol`);
                return false;
            }
            // The TS-provided FQN tells us the full identifier, and the origin file
            // in some circumstances.
            const fqn = tc.getFullyQualifiedName(s);
            ast_tools_1.debugLog(verbose, `got FQN ${fqn}`);
            // Name-based check
            if (!(fqn.endsWith('.' + this.bannedName) || fqn === this.bannedName)) {
                ast_tools_1.debugLog(verbose, `FQN ${fqn} doesn't match name ${this.bannedName}`);
                return false; // not a use of the symbols we want
            }
            // Check if it's part of a declaration or import. The check is cheap. If
            // we're looking for the uses of a symbol, we don't alert on the imports, to
            // avoid flooding users with warnings (as the actual use will be alerted)
            // and bad fixes.
            const p = n.parent;
            if (p && (ast_tools_1.isDeclaration(p) || ast_tools_1.isPartOfImportStatement(p))) {
                ast_tools_1.debugLog(verbose, `We don't flag symbol declarations`);
                return false;
            }
            // No file info in the FQN means it's not explicitly imported.
            // That must therefore be a local variable, or an ambient symbol
            // (and we only care about ambients here). Those could come from
            // either a declare somewhere, or one of the core libraries that
            // are loaded by default.
            if (!fqn.startsWith('"')) {
                // We need to trace things back, so get declarations of the symbol.
                const declarations = s.getDeclarations();
                if (!declarations) {
                    ast_tools_1.debugLog(verbose, `Symbol never declared?`);
                    return false;
                }
                if (!declarations.some(ast_tools_1.isAmbientDeclaration) &&
                    !declarations.some(ast_tools_1.isInStockLibraries)) {
                    ast_tools_1.debugLog(verbose, `Symbol neither ambient nor from the stock libraries`);
                    return false;
                }
            }
            ast_tools_1.debugLog(verbose, `all clear, report finding`);
            return true;
        }
    }
    exports.AbsoluteMatcher = AbsoluteMatcher;
    // TODO: Export the matched node kinds here.
    /**
     * This class matches a property access node, based on a property holder type
     * (through its name), i.e. a class, and a property name.
     *
     * The logic is voluntarily simple: if a matcher for `a.b` tests a `x.y` node,
     * it will return true if:
     * - `x` is of type `a` either directly (name-based) or through inheritance
     *   (ditto),
     * - and, textually, `y` === `b`.
     *
     * Note that the logic is different from TS's type system: this matcher doesn't
     * have any knowledge of structural typing.
     */
    class PropertyMatcher {
        constructor(bannedType, bannedProperty) {
            this.bannedType = bannedType;
            this.bannedProperty = bannedProperty;
        }
        static fromSpec(spec) {
            if (spec.indexOf('.prototype.') === -1) {
                throw new Error(`BANNED_PROPERTY expects a .prototype in your query.`);
            }
            const requestParser = /^([\w\d_.-]+)\.prototype\.([\w\d_.-]+)$/;
            const matches = requestParser.exec(spec);
            if (!matches) {
                throw new Error('Cannot understand the BannedProperty spec' + spec);
            }
            const [bannedType, bannedProperty] = matches.slice(1);
            return new PropertyMatcher(bannedType, bannedProperty);
        }
        /**
         * @param n The PropertyAccessExpression we're looking at.
         */
        matches(n, tc, verbose) {
            return n.name.text === this.bannedProperty &&
                this.typeMatches(tc.getTypeAtLocation(n.expression));
        }
        exactTypeMatches(inspectedType) {
            const typeSymbol = inspectedType.getSymbol() || false;
            return typeSymbol && typeSymbol.getName() === this.bannedType;
        }
        // TODO: Account for unknown types/ '?', and 'loose type matches', i.e. if the
        // actual type is a supertype of the prohibited type.
        typeMatches(inspectedType) {
            if (this.exactTypeMatches(inspectedType)) {
                return true;
            }
            const baseTypes = inspectedType.getBaseTypes() || [];
            return baseTypes.some(base => this.exactTypeMatches(base));
        }
    }
    exports.PropertyMatcher = PropertyMatcher;
});
//# sourceMappingURL=data:application/json;base64,