{"version":3,"file":"ApiNamespace.js","sourceRoot":"","sources":["../../src/model/ApiNamespace.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;AAG3D,2EAAuG;AACvG,8DAAoF;AACpF,qEAA8F;AAC9F,yDAA4E;AAa5E;;;;;;;;;;;;;;;;;;;;;GAqBG;AACH,MAAa,YAAa,SAAQ,6CAAqB,CAAC,2BAAY,CAAC,uCAAkB,CAAC,iCAAe,CAAC,CAAC,CAAC;IAEjG,MAAM,CAAC,eAAe,CAAC,IAAY;QACxC,OAAO,GAAG,IAAI,IAAI,2BAAqB,EAAE,CAAC;IAC5C,CAAC;IAED,YAAmB,OAA6B;QAC9C,KAAK,CAAC,OAAO,CAAC,CAAC;IACjB,CAAC;IAED,gBAAgB;IAChB,IAAW,IAAI;QACb,mCAA6B;IAC/B,CAAC;IAED,gBAAgB;IAChB,IAAW,YAAY;QACrB,OAAO,YAAY,CAAC,eAAe,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACjD,CAAC;CACF;AAnBD,oCAmBC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport { ApiItemKind } from '../items/ApiItem';\r\nimport { ApiItemContainerMixin, IApiItemContainerMixinOptions } from '../mixins/ApiItemContainerMixin';\r\nimport { IApiDeclaredItemOptions, ApiDeclaredItem } from '../items/ApiDeclaredItem';\r\nimport { ApiReleaseTagMixin, IApiReleaseTagMixinOptions } from '../mixins/ApiReleaseTagMixin';\r\nimport { IApiNameMixinOptions, ApiNameMixin } from '../mixins/ApiNameMixin';\r\n\r\n/**\r\n * Constructor options for {@link ApiClass}.\r\n * @public\r\n */\r\nexport interface IApiNamespaceOptions extends\r\n  IApiItemContainerMixinOptions,\r\n  IApiNameMixinOptions,\r\n  IApiReleaseTagMixinOptions,\r\n  IApiDeclaredItemOptions {\r\n}\r\n\r\n/**\r\n * Represents a TypeScript namespace declaration.\r\n *\r\n * @remarks\r\n *\r\n * This is part of the {@link ApiModel} hierarchy of classes, which are serializable representations of\r\n * API declarations.\r\n *\r\n * `ApiNamespace` represents a TypeScript declaration such `X` or `Y` in this example:\r\n *\r\n * ```ts\r\n * export namespace X {\r\n *   export namespace Y {\r\n *     export interface IWidget {\r\n *       render(): void;\r\n *     }\r\n *   }\r\n * }\r\n * ```\r\n *\r\n * @public\r\n */\r\nexport class ApiNamespace extends ApiItemContainerMixin(ApiNameMixin(ApiReleaseTagMixin(ApiDeclaredItem))) {\r\n\r\n  public static getContainerKey(name: string): string {\r\n    return `${name}|${ApiItemKind.Namespace}`;\r\n  }\r\n\r\n  public constructor(options: IApiNamespaceOptions) {\r\n    super(options);\r\n  }\r\n\r\n  /** @override */\r\n  public get kind(): ApiItemKind {\r\n    return ApiItemKind.Namespace;\r\n  }\r\n\r\n  /** @override */\r\n  public get containerKey(): string {\r\n    return ApiNamespace.getContainerKey(this.name);\r\n  }\r\n}\r\n"]}