{"version":3,"file":"StringChecks.js","sourceRoot":"","sources":["../../src/analyzer/StringChecks.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;AAE3D;;GAEG;AACH,MAAa,YAAY;IAUvB;;;;;;;;;;;;;;;;;;QAkBI;IACI,MAAM,CAAC,8BAA8B,CAAC,UAAkB;QAC9D,IAAI,UAAU,CAAC,MAAM,KAAK,CAAC,EAAE;YAC3B,OAAO,KAAK,CAAC,CAAC,kBAAkB;SACjC;QAED,IAAI,YAAY,CAAC,wBAAwB,CAAC,IAAI,CAAC,UAAU,CAAC,EAAE;YAC1D,OAAO,KAAK,CAAC,CAAC,gCAAgC;SAC/C;QAED,IAAI,YAAY,CAAC,4BAA4B,CAAC,IAAI,CAAC,UAAU,CAAC,EAAE;YAC9D,OAAO,KAAK,CAAC,CAAC,6BAA6B;SAC5C;QAED,OAAO,IAAI,CAAC;IACd,CAAC;;AA1CD,0FAA0F;AAC1F,sGAAsG;AACtG,sGAAsG;AACtG,0EAA0E;AAClD,qCAAwB,GAAW,cAAc,CAAC;AAE1E,4CAA4C;AACpB,yCAA4B,GAAW,QAAQ,CAAC;AAR1E,oCA4CC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\n/**\r\n * Helpers for validating various text string formats.\r\n */\r\nexport class StringChecks {\r\n  // Note: In addition to letters, numbers, underscores, and dollar signs, modern ECMAScript\r\n  // also allows Unicode categories such as letters, combining marks, digits, and connector punctuation.\r\n  // These are mostly supported in all environments except IE11, so if someone wants it, we would accept\r\n  // a PR to allow them (although the test surface might be somewhat large).\r\n  private static readonly _identifierBadCharRegExp: RegExp = /[^a-z0-9_$]/i;\r\n\r\n  // Identifiers most not start with a number.\r\n  private static readonly _identifierNumberStartRegExp: RegExp = /^[0-9]/;\r\n\r\n  /**\r\n   * Tests whether the input string is safe to use as an ECMAScript identifier without quotes.\r\n   *\r\n   * @remarks\r\n   * For example:\r\n   *\r\n   * ```ts\r\n   * class X {\r\n    *   public okay: number = 1;\r\n    *   public \"not okay!\": number = 2;\r\n    * }\r\n    * ```\r\n    *\r\n    * A precise check is extremely complicated and highly dependent on the ECMAScript standard version\r\n    * and how faithfully the interpreter implements it.  To keep things simple, `isValidUnquotedIdentifier()`\r\n    * conservatively checks for basic alphanumeric identifiers and returns false otherwise.\r\n    *\r\n    * Based on `StringChecks.explainIfInvalidUnquotedIdentifier()` from TSDoc.\r\n    */\r\n   public static isSafeUnquotedMemberIdentifier(identifier: string): boolean {\r\n    if (identifier.length === 0) {\r\n      return false; // cannot be empty\r\n    }\r\n\r\n    if (StringChecks._identifierBadCharRegExp.test(identifier)) {\r\n      return false; // cannot contain bad characters\r\n    }\r\n\r\n    if (StringChecks._identifierNumberStartRegExp.test(identifier)) {\r\n      return false; // cannot start with a number\r\n    }\r\n\r\n    return true;\r\n  }\r\n}\r\n"]}